#include "raylib.h"

#define NUM_BLOCKS 70
#define MAX_DATAVALS 8

int blocktile[NUM_BLOCKS][MAX_DATAVALS] = {
    {0},
    {1,2,3,128},
    {4,5,6,7,8,9,10},
    {11,12,13,14,15,16,17},
    {18,19,20,21,22,23,24},
    {25,26,27,28,29,30,31},
    {129,129,129,129,129,129,129,129},
    {130},
	{'A','A','A','A','A','A','A','A'},
	{'B','B','B','B','B','B','B','B'},
	{'C','C','C','C','C','C','C','C'},
	{'D','D','D','D','D','D','D','D'},
	{'E','E','E','E','E','E','E','E'},
	{'F','F','F','F','F','F','F','F'},
	{'G','G','G','G','G','G','G','G'},
	{'H','H','H','H','H','H','H','H'},
	{'I','I','I','I','I','I','I','I'},
	{'J','J','J','J','J','J','J','J'},
	{'K','K','K','K','K','K','K','K'},
	{'L','L','L','L','L','L','L','L'},
	{'M','M','M','M','M','M','M','M'},
	{'N','N','N','N','N','N','N','N'},
	{'O','O','O','O','O','O','O','O'},
	{'P','P','P','P','P','P','P','P'},
	{'Q','Q','Q','Q','Q','Q','Q','Q'},
	{'R','R','R','R','R','R','R','R'},
	{'S','S','S','S','S','S','S','S'},
	{'T','T','T','T','T','T','T','T'},
	{'U','U','U','U','U','U','U','U'},
	{'V','V','V','V','V','V','V','V'},
	{'W','W','W','W','W','W','W','W'},
	{'X','X','X','X','X','X','X','X'},
	{'Y','Y','Y','Y','Y','Y','Y','Y'},
	{'Z','Z','Z','Z','Z','Z','Z','Z'},
	{'a','a','a','a','a','a','a','a'},
	{'b','b','b','b','b','b','b','b'},
	{'c','c','c','c','c','c','c','c'},
	{'d','d','d','d','d','d','d','d'},
	{'e','e','e','e','e','e','e','e'},
	{'f','f','f','f','f','f','f','f'},
	{'g','g','g','g','g','g','g','g'},
	{'h','h','h','h','h','h','h','h'},
	{'i','i','i','i','i','i','i','i'},
	{'j','j','j','j','j','j','j','j'},
	{'k','k','k','k','k','k','k','k'},
	{'l','l','l','l','l','l','l','l'},
	{'m','m','m','m','m','m','m','m'},
	{'n','n','n','n','n','n','n','n'},
	{'o','o','o','o','o','o','o','o'},
	{'p','p','p','p','p','p','p','p'},
	{'q','q','q','q','q','q','q','q'},
	{'r','r','r','r','r','r','r','r'},
	{'s','s','s','s','s','s','s','s'},
	{'t','t','t','t','t','t','t','t'},
	{'u','u','u','u','u','u','u','u'},
	{'v','v','v','v','v','v','v','v'},
	{'w','w','w','w','w','w','w','w'},
	{'x','x','x','x','x','x','x','x'},
	{'y','y','y','y','y','y','y','y'},
	{'z','z','z','z','z','z','z','z'},
	{'!','!','!','!','!','!','!','!'},
	{'?','?','?','?','?','?','?','?'},
	{'.','.','.','.','.','.','.','.'},
	{',',',',',',',',',',',',',',','},
	{':',':',':',':',':',':',':',':'},
	{';',';',';',';',';',';',';',';'},
	{'-','-','-','-','-','-','-','-'},
	{'+','+','+','+','+','+','+','+'},
	{'(','(','(','(','(','(','(','('},
	{')',')',')',')',')',')',')',')'}
};

typedef enum {
  PASS_ALWAYS = 0,
  PASS_COLOR,
  PASS_TRANSFORM,
  PASS_KEY,
  PASS_GIVE,
  PASS_NEXTLEVEL,
  PASS_SOLID,
  PASS_BREAK,
  PASS_PUSH
} collision_type;

typedef enum {
  PA = PASS_ALWAYS,
  PC = PASS_COLOR,
  PT = PASS_TRANSFORM,
  PK = PASS_KEY,
  PG = PASS_GIVE,
  PN = PASS_NEXTLEVEL,
  PS = PASS_SOLID,
  PB = PASS_BREAK,
  PP = PASS_PUSH
} collision_type_short;

Color tilecolors[NUM_BLOCKS][MAX_DATAVALS] = {
    {BLACK},
    {WHITE,WHITE,LIGHTGRAY,WHITE},
    {GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE,WHITE},
    {WHITE},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
    {WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN},
};

Color worldcolors[] = {
    WHITE,GOLD,ORANGE,RED,MAGENTA,VIOLET,BLUE,GREEN,BLACK
};

int tileparams[NUM_BLOCKS][MAX_DATAVALS] = {
    {0},
    {0,0,0,0},
    {1,2,3,4,5,6,7},
    {1,2,3,4,5,6,7},
    {0,1,2,3,4,5,6},
    {0,1,2,3,4,5,6},
    {0,0,0,0,0,0,0,0},
    {0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
};

int tilecollision[NUM_BLOCKS][MAX_DATAVALS] = {
  {PA},
  {PS,PP,PB,PS},
  {PC,PC,PC,PC,PC,PC,PC},
  {PT,PT,PT,PT,PT,PT,PT},
  {PG,PG,PG,PG,PG,PG,PG},
  {PK,PK,PK,PK,PK,PK,PK},
  {PN,PN,PN,PN,PN,PN,PN,PN},
  {PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
  {PS,PS,PS,PS,PS,PS,PS,PS},
};
